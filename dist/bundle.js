/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classes/dictionary.js":
/*!***********************************!*\
  !*** ./src/classes/dictionary.js ***!
  \***********************************/
/***/ ((module) => {

eval("\n\nclass Dictionary {\n  constructor(wordList) {\n    this.wordList = wordList;\n  };\n};\n\nmodule.exports = Dictionary;\n\n//# sourceURL=webpack://fohacker/./src/classes/dictionary.js?");

/***/ }),

/***/ "./src/classes/game.js":
/*!*****************************!*\
  !*** ./src/classes/game.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst GameData = __webpack_require__(/*! ./gamedata */ \"./src/classes/gamedata.js\");\nconst Perk = __webpack_require__(/*! ./perk */ \"./src/classes/perk.js\");\nconst TerminalData = __webpack_require__(/*! ./terminaldata */ \"./src/classes/terminaldata.js\");\n\nlet perks = [\n    new Perk(\n        \"Peek-A-Boo\",\n        [\n            \"You can see the current password but you still have to click it by yourself.\",\n            \"Less searching, more clicking. The password gets highlighted too.\"\n        ],\n        2, 2),\n    new Perk(\n        \"More Of The Same\",\n        [\n            \"More possibilities. More trying. More experience.\"\n        ],\n        0, 1),\n    new Perk(\n        \"Just One More Minute ...\",\n        [\n            \"Increases max.attempts.\",\n            \"Increases max.attempts.\",\n            \"Increases max.attempts.\",\n            \"Increases max.attempts.\",\n            \"Increases max.attempts.\",\n            \"Increases max.attempts.\"\n        ],\n        0, 6),\n    new Perk(\n        \"Enter The Matrix\",\n        [\n            \"Highlight duds.\"\n        ],\n        0, 1),\n    new Perk(\n        \"Rubbersome\",\n        [\n            \"Be rubber, my friend. Less damage when shocked by a locked terminal.\"\n        ],\n        0, 1),\n    new Perk(\n        \"Nerd Rage\",\n        [\n            \"Stop typing passwords. Start smashing terminals.\"\n        ],\n        0, 1),\n];\n\nclass Game {\n    static version = \"0.1 (alpha)\"\n    static dudCharacters = \",;.:^<>()[]{}!?@%$`'\\\"*+-=/\\|_\";\n    static startDuds = \"<([{\";\n    static endDuds = \">)]}\";\n\n    constructor() {\n        this.gameData = new GameData();\n        this.terminalData = new TerminalData();\n    }\n\n    nextLevelExp = function () {\n        return Math.round(Math.exp((this.gameData.level + 1) * 0.45) + Math.exp(this.gameData.level * 0.45) * 6);\n    };\n\n    levelUp = function () {\n        let nextExp = this.nextLevelExp();\n\n        while (this.gameData.experience > nextExp) {\n            var possibleOverhead = nextExp - this.gameData.experience;\n            if (possibleOverhead <= 0) {\n                this.gameData.level++;\n                this.gameData.skillpoints++;\n                $('.info .input').before('<span class=\"info\">Level Up</span><br>');\n                this.gameData.totalExperience += this.gameData.experience;\n                this.gameData.experience = Math.abs(possibleOverhead);\n            }\n        }\n    };\n\n    addExperience = function (words) {\n        var addExp = Math.round((words + 1) * this.gameData.difficulty * 0.35);\n        this.gameData.experience += addExp;\n        $('.info .input').before('<span class=\"info\">EXP +' + addExp + '</span><br>');\n        this.levelUp();\n    };\n\n    getDifficulty = function () {\n        if (this.gameData.difficulty >= 4 && this.gameData.difficulty <= 5) {\n            return \"Easy\";\n        } else if (this.gameData.difficulty >= 6 && this.gameData.difficulty <= 8) {\n            return \"Advanced\";\n        } else if (this.gameData.difficulty >= 9 && this.gameData.difficulty <= 10) {\n            return \"Expert\";\n        } else if (this.gameData.difficulty >= 11 && this.gameData.difficulty <= 12) {\n            return \"Master\";\n        }\n    };\n\n    updateUI = function () {\n        $('.infobar .difficulty').text(this.getDifficulty());\n        $('.infobar .level').text(this.gameData.level);\n        $('.expbar').css('width', this.gameData.experience / (this.nextLevelExp() / 100));\n\n        if (perks[0][\"level\"] > 0) {\n            $('.password').text('(Password=' + this.gameData.password + ')');\n        }\n\n        $('#attempts .attempt').detach();\n        for (var i = 0; this.gameData.attempts > i; i++) {\n            $('#attempts').append('<span class=\"attempt\">&nbsp;&nbsp;</span>');\n        }\n\n        $('.perklist').empty();\n        $('.perklist').append('Skillpoints: <div class=\"skillpoints\">' + this.gameData.skillpoints + '</div><br>');\n        $.each(perks, function (key, perk) {\n            if (perk.meetsRequirements) {\n                var classes = ['perkdiv'];\n                if (perk.level > 0) {\n                    classes.push('active');\n                }\n\n                var description = perk.description[perk.level];\n                if (description === undefined) {\n                    description = \"Maxed out.\"\n                }\n\n                $('.perklist').append('<div class=\"' + classes.join(' ') + '\" data-id=\"' + key + '\">'\n                    + '<b>' + perk.title + '</b> (' + perk.level + '/' + perk.maxlevel + ')<br>'\n                    + '<span>' + description + '</span>'\n                    + '</div>');\n            }\n        });\n        $('.perklist').append();\n        $('.perkdiv').on('click', function () {\n            if (this.gameData.skillpoints > 0) {\n                var perkid = $(this).data(\"id\");\n                if ((perks[perkid].level + 1) <= perks[perkid].maxlevel) {\n                    perks[perkid].level++;\n                    this.gameData.skillpoints--;\n                    this.updateUI();\n                }\n            }\n        });\n    };\n\n    clearOld = function () {\n        $('.terminal .linenumber').empty();\n        $('.terminal .code').empty();\n        this.gameData.attempts = 4;\n        this.gameData.currentPasswords = this.gameData.passwords[this.gameData.difficulty];\n        $('.info').empty();\n        $('.info').append('<span class=\"input\">&nbsp</span>');\n    };\n\n    createPointers = function () {\n        var _this = this; // TODO: Workaround because of scoping\n        var lineNumber = Math.random().toString(16).slice(2, 6);\n\n        $('.terminal .linenumber').each(function (key, value) {\n            for (var i = 0; i < _this.terminalData.rows; i++) {\n                lineNumber = (parseInt(lineNumber, _this.terminalData.rows) + (i * 12)).toString(16).toUpperCase();// Todo allow overflow!\n\n                if (lineNumber.length > 4) {\n                    lineNumber = lineNumber.slice(1, 5);\n                }\n                while (lineNumber.length < 4) {\n                    lineNumber = \"0\" + lineNumber;\n                }\n\n                if (i === 15) {\n                    $(value).append(\"<span>0x\" + lineNumber + \"</span>\");\n                } else {\n                    $(value).append(\"<span>0x\" + lineNumber + \"</span><br>\");\n                }\n            }\n        });\n    };\n\n    createDudCode = function () {\n        // Iterate for each character\n        for (var i = 0; (this.terminalData.columns * this.terminalData.rows) > i; i++) {\n            var randomData = \"\";\n            // Iterate per \"line\"\n            for (var j = 0; this.terminalData.dataPerColumn > j; j++) {\n                let randomDudIndex = Math.round(Math.random() * (Game.dudCharacters.length - 1));\n                randomData += Game.dudCharacters[randomDudIndex];\n            }\n            // console.log(\"Duds [\" + i + \"]: \" + randomData);\n            this.terminalData.code[i] = randomData;\n        }\n    };\n\n    createCurrentPasswords = function () {\n        var currentPasswords = [];\n\n        // If dictionary is too small\n        let passwordsForDifficulty = this.gameData.passwords[this.gameData.difficulty];\n        let amountOfPasswords = passwordsForDifficulty.length;\n        if (this.gameData.passwordsOnScreen > amountOfPasswords) {\n            this.gameData.passwordsOnScreen = amountOfPasswords;\n            console.log(\"Dictionary \" + this.getDifficulty() + \"(Size: \" + this.gameData.difficulty + \") has too few entries (\" + amountOfPasswords + \").\");\n        }\n\n        var tempPasswords = passwordsForDifficulty.wordList.slice();\n        // Pick password\n        this.gameData.password = tempPasswords[Math.round(Math.random() * (tempPasswords.length - 1))];\n        for (var i = 0; this.gameData.passwordsOnScreen > i; i++) {\n            currentPasswords[i] = tempPasswords[Math.round(Math.random() * (tempPasswords.length - 1))];\n\n            var position = $.inArray(currentPasswords[i], tempPasswords);\n            if (~position) {\n                tempPasswords.splice(position, 1);\n            }\n        }\n        console.log(currentPasswords);\n    };\n\n    addPasswords = function () {\n        var tempPasswords = this.gameData.currentPasswords.wordList.slice();\n        var blockedPositions = [];\n\n        while (tempPasswords.length > 0) {\n            var randomPosition = Math.round(Math.random() * (this.terminalData.maxCharacters() - this.gameData.difficulty)); // Password fits into last line\n\n            if ($.inArray(randomPosition, blockedPositions) > -1) {\n                // console.log(\"Hit: \" + terminalData.code[Math.floor(randomPosition / (terminalData.columns * terminalData.dataPerColumn))]);\n                continue; // Get a new random position\n            }\n\n            if (randomPosition < 0) {\n                randomPosition = 0;\n            }\n\n            if (randomPosition >= this.terminalData.maxCharacters()) {\n                console.log(\"Position calculation wrong: \" + randomPosition + \" of \" + this.terminalData.maxCharacters());\n            }\n\n            var linePosition = Math.floor(randomPosition / this.terminalData.dataPerColumn);\n            var inLinePosition = randomPosition % this.terminalData.dataPerColumn;\n\n            var nextPassword = tempPasswords.shift();\n            if ((linePosition + 1) > (this.terminalData.columns * this.terminalData.rows)) {\n                console.log(\"Accidentally hit \" + (linePosition + 1) + \"th row during password insertion.\");\n            }\n\n            var code = this.terminalData.code[linePosition];\n            if ((inLinePosition + this.gameData.difficulty) > this.terminalData.dataPerColumn) { // Password needs more than one row\n                var difference = this.terminalData.dataPerColumn - inLinePosition;\n\n                var overhead = this.gameData.difficulty - difference;\n                this.terminalData.code[linePosition] = code.substr(0, inLinePosition) + nextPassword.substr(0, difference);\n\n                code = this.terminalData.code[linePosition + 1];\n                this.terminalData.code[linePosition + 1] = nextPassword.substr(difference, overhead) + code.substr(overhead);\n                blockedPositions.push(randomPosition, randomPosition - 1, randomPosition + 1, randomPosition - 2, randomPosition + 2, randomPosition - 3, randomPosition + 3, randomPosition - 4, randomPosition + 4);\n            } else {\n                this.terminalData.code[linePosition] = code.substr(0, inLinePosition) + nextPassword + code.substr(inLinePosition + nextPassword.length);\n                blockedPositions.push(randomPosition, randomPosition - 1, randomPosition + 1, randomPosition - 2, randomPosition + 2, randomPosition - 3, randomPosition + 3, randomPosition - 4, randomPosition + 4);\n            }\n        }\n    };\n\n    findDuds = function () {\n        console.log(\"Terminal has size: \" + this.terminalData.code.length);\n        // Get the end duds first\n        var duds = [];\n        for (var i = 0; this.terminalData.code.length > i; i++) {\n            // TODO Code below hits only once. Better RegEx?\n            for (var j = this.terminalData.code.length; 0 < j; j--) {\n                var endPosition = $.inArray(this.terminalData.code[i][j], Game.endDuds);\n                if (~endPosition) {\n                    var cutString = this.terminalData.code[i].substr(0, endPosition);\n                    var startPosition = $.inArray(Game.startDuds[endPosition], cutString);\n                    if (~startPosition) {\n                        duds.push([\n                            {\n                                \"dudPos\": endPosition,// Position in char string\n                                \"startDud\": startPosition,\n                                \"endDud\": j\n                            }\n                        ]);\n                        console.log(\"Adding duds: \" + endPosition + \"/\" + startPosition + \"/\" + j);\n                        console.log(this.terminalData.code[i]);\n                        // TODO: Only highlights initial duds but not new.\n                    }\n                }\n            }\n        }\n        if (duds.length > 0) {\n            console.log(\"Final list of duds: \");\n            console.log(duds);\n        }\n    };\n\n    createMarkup = function () {\n    };\n\n    addHtml = function () {\n        let tmpPasswords = this.gameData.currentPasswords.wordList.slice();\n\n        // TODO: Use markup array\n        // TODO: More than two rows\n        for (var i = 0; this.terminalData.code.length > i; i++) {\n            var selector = \"\";\n            if (i < 16) {\n                selector = '.terminal .left.code';\n            } else {\n                selector = '.terminal .right.code';\n            }\n\n            // TODO: Finds passwords in a single row\n            let lineValue = this.terminalData.code[i];\n            // Workaround to fix nasty html side effects\n            lineValue = lineValue.replace(/</g, \"&lt;\");\n            lineValue = lineValue.replace(/>/g, \"&gt;\");\n\n            let replacedPassword = \"\";\n            let _this = this; // TODO: Workaround because of scope\n            tmpPasswords.forEach(function (value, key, array) {\n                // Finds all single line passwords\n                // TODO: Fails for words including other words\n                let tempNewLineValue = lineValue.replace(value, '<span class=\"word\" data-word=\"' + value + '\">' + value + '</span>');\n\n                // Assume nothing has been replaced\n                // TODO: Can contain non replaced word\n                // Look a head if word is in next line\n                if (tempNewLineValue === lineValue) {\n                    if (i < _this.terminalData.code.length - 1) {\n                        // Find the index in the line we need to look up for the split word\n                        // e.g. a 4 letter word can have a max of 3 chars and a min of 1 char in one line\n                        let limitOldLine = (_this.terminalData.dataPerColumn - 1) - (value.length - 1);// Actually this will be an index\n\n                        let limitNewLine = (value.length - 1);// Also an index\n                        let lineLookAhead = _this.terminalData.code[i].substr(limitOldLine) + _this.terminalData.code[i + 1].substr(0, limitNewLine + 1);\n                        console.log(\"Lookahead \", value, limitOldLine, limitNewLine, lineLookAhead);\n\n                        // This is the index of the cut and spliced lines\n                        let startIndex = lineLookAhead.indexOf(value);\n                        let endIndex = startIndex + value.length;\n\n                        // NOTE: At this point the whole stuff will fail as the next line will override the markup of this nice linebreak stuff.\n                        // I'd rather not implement linebreaking for now and just ensure limits.\n                    }\n                } else {\n                    // TODO: Replace in split words too\n                    // console.log(\"Replacement\", lineValue, \"is\" , tempNewLineValue);\n                    replacedPassword = value;\n                }\n\n                lineValue = tempNewLineValue;\n                // TODO: One line can yield multiple passwords for small lengths\n            });\n\n            $(selector).append('<span id=\"span' + i + '\"></span><br>');\n            // Note: If rendered as html some duds will break stuff.\n            $('#span' + i).html(lineValue);\n\n            tmpPasswords = tmpPasswords.filter(function (value, key, array) {\n                return value !== replacedPassword;\n            });\n        }\n    };\n\n    addScript = function () {\n        // TODO: Simulate typing the hovered word\n        $('.code .word').on('mouseover', function (event) {\n            var passwordHovered = event.target.textContent;\n            console.log(\"Hovering: \" + passwordHovered);\n            $('.info .input').attr('data-content', passwordHovered);\n        });\n        $('.code .word').on('mouseout', function (event) {\n            console.log(\"End hover\");\n            $('.info .input').attr('data-content', '');\n        });\n        // Todo: Merge code from createTerminal()\n    };\n\n    createTerminal = function () {\n        this.clearOld();\n\n        console.log(\"--- Creating pointers ---\");\n        this.createPointers();// Create \"random\" line numbers\n        console.log(\"--- Creating duds---\");\n        this.createDudCode();// Create password text filled with duds\n        console.log(\"--- Create passwords ---\");\n        this.createCurrentPasswords();// Generate current password list\n        console.log(\"--- Merge passwords and duds ---\");\n        this.addPasswords();// Merge duds and passwords\n        console.log(\"--- Find/highlight duds---\");\n        this.findDuds();\n        console.log(\"--- Create markup ---\");\n        this.createMarkup();\n        console.log(\"--- Add html ---\");\n        this.addHtml();// Create HTML\n        console.log(\"--- Add events and listeners ---\");\n        this.addScript();\n\n        if (perks[0][\"level\"] >= 2) {\n            $('.code .word').each(function () {\n                if (this.gameData.password == $(this).data(\"word\")) {\n                    $(this).addClass(\"highlight\");\n                }\n            });\n        }\n\n        // Create settings menubar\n        // Todo move code to ui building code\n        // Code by http://www.jacklmoore.com/notes/jquery-tabs/\n        $('ul.tabs').each(function () {\n            // For each set of tabs, we want to keep track of\n            // which tab is active and it's associated content\n            var $active, $content, $links = $(this).find('a');\n\n            // If the location.hash matches one of the links, use that as the active tab.\n            // If no match is found, use the first link as the initial active tab.\n            $active = $($links.filter('[href=\"' + location.hash + '\"]')[0] || $links[0]);\n            $active.addClass('active');\n\n            $content = $($active[0].hash);\n\n            // Hide the remaining content\n            $links.not($active).each(function () {\n                $(this.hash).hide();\n            });\n\n            // Bind the click event handler\n            $(this).on('click', 'a', function (e) {\n                // Make the old tab inactive.\n                $active.removeClass('active');\n                $content.hide();\n\n                // Update the variables with the new link and content\n                $active = $(this);\n                $content = $(this.hash);\n\n                // Make the tab active.\n                $active.addClass('active');\n                $content.show();\n\n                // Prevent the anchor's default click action\n                e.preventDefault();\n            });\n        });\n\n        // Make passwords clickable\n        $('.code .word').on('click', function (event) {\n            var selectedPassword = event.target.textContent;\n\n            var position = $.inArray(selectedPassword, this.gameData.currentPasswords);\n            if (~position) {\n                this.gameData.currentPasswords.splice(position, 1);\n            }\n\n            var likeness = 0;\n            for (var i = 0; this.gameData.difficulty > i; i++) {\n                if (this.gameData.password[i] == selectedPassword[i]) {\n                    likeness++;\n                }\n            }\n\n            if (this.gameData.password == selectedPassword) {\n                var oldLength = this.gameData.currentPasswords.length;\n                this.createTerminal();\n                this.addExperience(oldLength);\n                $('.info .input').before('<span class=\"try\">' + selectedPassword + '</span><br>');\n                $('.info .input').before('<span class=\"text\">Access granted.</span><br>');\n            } else {\n                this.gameData.attempts--;\n                $('.info .input').before('<span class=\"try\">' + selectedPassword + '</span><br>');\n                $('.info .input').before('<span class=\"likeness\">Likeness=' + likeness + '</span><br>');\n                $('.info .input').before('<span class=\"text\">Entry denied.</span><br>');\n                if (this.gameData.attempts == 0) {\n                    this.createTerminal();\n                    $('.info .input').before('<span class=\"try\">' + selectedPassword + '</span><br>');\n                    $('.info .input').before('<span class=\"text\">Terminal locked.</span><br>');\n                }\n            }\n\n            this.updateUI();\n        });\n\n        // Break special\n        $('.linebreak').hover(function () {\n            var dataWord = $(this).data(\"word\");\n            var siblings = $('[data-word=\"' + dataWord + '\"]');\n            $(siblings).each(function () {\n                $(this).css(\"background-color\", \"#82FA58\");\n                $(this).css(\"color\", \"#0B1907\");\n            });\n        }, function () {\n            $('.linebreak').css(\"background-color\", \"#0B1907\");\n            $('.linebreak').css(\"color\", \"#82FA58\");\n        });\n\n        // Todo update data word :(\n        $('.pagebreak').hover(function () {\n            $('.pagebreak').css(\"background-color\", \"#82FA58\");\n            $('.pagebreak').css(\"color\", \"#0B1907\");\n        }, function () {\n            $('.pagebreak').css(\"background-color\", \"#0B1907\");\n            $('.pagebreak').css(\"color\", \"#82FA58\");\n        });\n\n        this.updateUI();\n    };\n};\n\nmodule.exports = Game;\n\n//# sourceURL=webpack://fohacker/./src/classes/game.js?");

/***/ }),

/***/ "./src/classes/gamedata.js":
/*!*********************************!*\
  !*** ./src/classes/gamedata.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Dictionary = __webpack_require__(/*! ./dictionary */ \"./src/classes/dictionary.js\");\n\nvar passwords = {\n    4: new Dictionary([\n        \"SAFE\",\n        \"HACK\",\n        \"CORE\",\n        \"TIME\",\n        \"NONE\",\n        \"SORT\",\n        \"ROLL\",\n        \"HUNT\",\n        \"BURN\",\n        \"WIRE\",\n        \"TOOL\",\n        \"BACK\",\n        \"BLUE\",\n        \"HARD\",\n        \"FIRE\",\n        \"TIRE\",\n        \"MIND\"\n    ]),\n    5: new Dictionary([\n        \"WOUND\",\n    ]),\n    6: new Dictionary([\n        \"WEAPON\",\n    ]),\n    7: new Dictionary([\n        \"ABCDEFG\",\n    ]),\n    8: new Dictionary([\n        \"ABCDEFGH\",\n    ])\n};\n\nclass GameData {\n    constructor() {\n        this.passwordsOnScreen = 14;\n        this.attempts = 4;\n        this.difficulty = 4;// word length\n        this.experience = 0;\n        this.totalExperience = 0;\n        this.level = 1;\n        this.skillpoints = 0;\n        this.passwords = passwords;\n        this.currentPasswords = passwords[this.difficulty];\n        this.caps = 0;\n        this.health = 100;\n        this.maxhealth = 100;\n    };\n};\n\nmodule.exports = GameData;\n\n//# sourceURL=webpack://fohacker/./src/classes/gamedata.js?");

/***/ }),

/***/ "./src/classes/perk.js":
/*!*****************************!*\
  !*** ./src/classes/perk.js ***!
  \*****************************/
/***/ ((module) => {

eval("\n\nclass Perk {\n  constructor(title, description, maxlevel) {\n    this.title = title;\n    this.description = description;\n    this.level = 0;\n    this.maxlevel = maxlevel;\n    this.meetsRequirements = true; // TODO: Implement!\n  };\n};\n\nmodule.exports = Perk;\n\n\n//# sourceURL=webpack://fohacker/./src/classes/perk.js?");

/***/ }),

/***/ "./src/classes/terminaldata.js":
/*!*************************************!*\
  !*** ./src/classes/terminaldata.js ***!
  \*************************************/
/***/ ((module) => {

eval("\n\nclass TerminalData {\n    constructor() {\n        this.rows = 16;\n        this.columns = 2;// Number of \"pages\"\n        this.dataPerColumn = 12;// Characters per column\n        this.code = [];\n        this.markup = [];\n    }\n\n    maxCharacters = function () {\n        return this.dataPerColumn * this.rows * this.columns;\n    };\n\n    codeString = function () {\n        var returnString = \"\";\n        for (var i = 0; this.code.length > i; i++) {\n            returnString += this.code[i];\n        }\n        return returnString;\n    };\n};\n\nmodule.exports = TerminalData;\n\n//# sourceURL=webpack://fohacker/./src/classes/terminaldata.js?");

/***/ }),

/***/ "./src/fohacker.js":
/*!*************************!*\
  !*** ./src/fohacker.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Todos\n * - Change RegExp approach and make it work\n *   - Make dud word removal work\n * - Have functions to update a specific ui element\n * - Find correct closures and merge stuff\n * - Give perks string key or getByTitle function\n * - Upgrade css (after feedback?)\n * - Implement more gameplay (lose hp on hacking fail, gameover?, stimpacks, radiation, S.P.E.C.I.A.L., ...)\n *   - Implements more perks and make old ones working\n *   - Fill dictionary\n * - Release game and write about it on reddit\n * - Limit info output to 16 lines\n * - Replace var with let where possible\n*/\n\n\n\nconst Game = __webpack_require__(/*! ./classes/game */ \"./src/classes/game.js\");\n\n(function ($) {\n  var game = new Game();\n\n  var encodeHtmlEntity = function (str) {\n    var buf = [];\n    for (var i = str.length - 1; i >= 0; i--) {\n      var character = str[i].charCodeAt();\n      if (/[:alphanum:]/.test(str[i])) {\n        buf.unshift([character].join(''));\n      } else {\n        buf.unshift(['&#', character, ';'].join(''));\n      }\n    }\n    return buf.join('');\n  };\n\n  $(document).ready(function () {\n    game.createTerminal();\n    $('.info .input').before('Fallout Hacker<br>Version ' + game.version + '<br>');\n  });\n})(jQuery);\n\n\n//# sourceURL=webpack://fohacker/./src/fohacker.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/fohacker.js");
/******/ 	
/******/ })()
;